# test_data_sources.py

import unittest
from unittest.mock import patch  
import pandas as pd
import tempfile
import sqlite3

from dataDisk import DataPipeline
from dataDisk.data_sources import CSVDataSource, SQLDataSource

class TestDataSources(unittest.TestCase):

    def test_csv_read(self):
        df = pd.DataFrame({'col1': [1, 2]})
        tmpfile = tempfile.NamedTemporaryFile()
        df.to_csv(tmpfile.name)
        
        datasource = CSVDataSource(tmpfile.name)
        pipeline = DataPipeline(source=datasource)
        df_out = pipeline.process()
        
        pd.testing.assert_frame_equal(df, df_out)
        
    def test_csv_write(self):
        tmpfile = tempfile.NamedTemporaryFile()
        datasource = CSVDataSource(tmpfile.name)
        
        data = pd.DataFrame({'col1': [3, 4]})
        pipeline = DataPipeline(sink=datasource)
        pipeline.process(data)
        
        df_out = pd.read_csv(tmpfile.name)
        pd.testing.assert_frame_equal(data, df_out)

    def test_sql_read(self):
        conn = sqlite3.connect(':memory:')
        df = pd.DataFrame({'col1': [1, 2]}) 
        df.to_sql('test', conn)
        
        datasource = SQLDataSource(conn)
        pipeline = DataPipeline(source=datasource)
        df_out = pipeline.process()
        
        pd.testing.assert_frame_equal(df, df_out)

    def test_sql_write(self):
        conn = sqlite3.connect(':memory:')
        datasource = SQLDataSource(conn)
        
        data = pd.DataFrame({'col1': [3, 4]})        
        pipeline = DataPipeline(sink=datasource)
        pipeline.process(data)
        
        df_out = pd.read_sql('test', conn)
        pd.testing.assert_frame_equal(data, df_out)

if __name__ == '__main__':
    unittest.main()
